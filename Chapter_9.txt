9.1.1 Editing User Information Form 

	Web browsers can't natively send put requests so the source html code includes a hidden input field. 

	How does rails now to use a Post request for new users and a Put request for editing user data?
	- Active Record has a new_record? method that tells it when a new record is added to the database

	Post for new 
	Put for edit

9.1.2 Unsuccessful Edits

	- Add an error message test
	- Get the error message test to pass
	- Create an update action that uses update_attributes

9.1.3 Successful Edits

9.2 Authorization

	Authentication - Is this person logged in
	Authorization  - What level of clearance does this person have

	Currently we have large security flaw or 3.  We can access the edit pages even when not logged in.
	We can also access any users edit page. 

1. Requiring signed-in users

	Since the security restrictions are the same for edit and update, we'll handle them in a single RSpec describe block.
	Starting with the sign in requirement, our initial tests verify that non-signed-in users attempting to access either action are simply sent to the sign-in page.  
 
 9.2.2 Requiring the right User

 	We want a user to only be able to edit their own information.  As it stands now any user can edit any other users information.

 	We'll right a test where the wrong user tries to edit another users information.  They edit and update, and be redirected to the root.

 	Build the test

 	Create another before_filter for the correct user.
 	The filter will require a new correct_user method

9.2.3 Friendly Redirecting

	We want users to be redirect to the original page they were trying to access after they login if it is required.

9.3.2 Sample Users

	Lets add some sample users.
	We'll use Ruby and Rake to generate these new users instead of visiting the sign up page a billion times or using the console.

	- We'll use the 'Faker' gem to manage this. 

	Next, we'll add a Rake task to create the sample users. Rake tasks live in the live in the "lib/task" directory.
	They are defined using namespaces(in this case :db).

9.3.3 Adding Pagination For User Index

	Gem 'bootstap-will_paginate'
	Gem "will paginate"

9.4.1 Admin Users

	Goal:

	1. Add admin attribute to user

	Process:

	1. Add a test for the admin attribute.  The test should test for the response of the admin attribute.  
	2. Add a set of tests for users with the admin att set to true
		- Save a user
		- toggle their admin status
		- check that admin? returns true

	3. Generate a new attribute using a migration

		"rails generate migration add_admin_to_user admin:boolean"

		This adddes the admin column to the users table.
		Here we should not that the columns contents for each user in the data table and each new user is default to nil which is false. 
		To add clearity we should add a default parameter to the migration specifying the default behavior in to explicitly be false like so.

		add_column :users, :admin, :boolean, default: false

	4. Migrate the development database and prepare the test database

		rake db:migrate
		rake db:test:prepare (This is now maintained by the test helper within rails! yay!)

	*  Our tests should now be passing *

	5. Lets update the sample data to make the first user an admin by default.

		- Remember that when we update the sample data we must reset, populate, and prepare the database (prepare is automatic guy)

	* Notes about attr_accesible

		attr_accessible atts can be assigned through mass assignment. We don't want admin to be available to that obviously.  

		Because it's not an attr_accessible we can't initialize it with a hash like admin: true.  So we have to use they toggle.

		This avoid someone running a request like this. put /users/17?admin=1 and setting themselves to admin.


9.4.2 The Destroy Action for deleting users.

	1. Add a delete link for each user on the index page.

		1. Allow factory to create admin users.

			factory :admin do
				admin true
			end

			This allows us to use the code FactoryGirl.create(:admin) to create an admin user for tests.

	2. Write Tests for non - admin users. 

		- What are we describing?  A Users page's delete links 
		- What are we testing
			- It has delete links for all users
			- No delete link for admin users
			- Admin can click the delete link and change the users count by 1 (delete a user)

	3. Create Destroy button next to each user in the users page view.

		This is tricky.  Web browsers don't like DELETE requests.  So we have to fake it with javascript.  This won't work on browsers that block java.  

		We are adding a method that controls.

	4.  Fix a security whole or two.





























