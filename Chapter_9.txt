9.1.1 Editing User Information Form 

	Web browsers can't natively send put requests so the source html code includes a hidden input field. 

	How does rails now to use a Post request for new users and a Put request for editing user data?
	- Active Record has a new_record? method that tells it when a new record is added to the database

	Post for new 
	Put for edit

9.1.2 Unsuccessful Edits

	- Add an error message test
	- Get the error message test to pass
	- Create an update action that uses update_attributes

9.1.3 Successful Edits

9.2 Authorization

	Authentication - Is this person logged in
	Authorization  - What level of clearance does this person have

	Currently we have large security flaw or 3.  We can access the edit pages even when not logged in.
	We can also access any users edit page. 

1. Requiring signed-in users

	Since the security restrictions are the same for edit and update, we'll handle them in a single RSpec describe block.
	Starting with the sign in requirement, our initial tests verify that non-signed-in users attempting to access either action are simply sent to the sign-in page.  
 
 9.2.2 Requiring the right User

 	We want a user to only be able to edit their own information.  As it stands now any user can edit any other users information.

 	We'll right a test where the wrong user tries to edit another users information.  They edit and update, and be redirected to the root.

 	Build the test

 	Create another before_filter for the correct user.
 	The filter will require a new correct_user method