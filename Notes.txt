8.2.2

1.  Define current_user method to find the user in the database corresponding to the session id.
	- Allows us to determin if a user is logged in
	- Allow for <%= current_user.name %>
	- Allow redirect to current_user	

	To do this we will need to find the current user. The "Find" method raises an error if the user is not found.
	But sometimes the users won't be logged in.  In that case we have to use a "find_by" method. 

	User.find_by(id: session[:user_id])

	Rather than raising an exception, this method return nil (indicating no such user) if the id is invalid.

	So our method would look like this

	def
		User.find_by(id: session[:user_id])
	end

	This would hit the database multiple times if the current_user appeared multiple times on a page.  
	So lets store it in an instance variable.

	if @current_user.nil?
		@current_user = User.find_by(id: session[:user_id])
	else
		@current_user
	end

	Using the or || operator 

	@current_user = @current_user || User.find_by(id: session[:user_id])

	User = nil or id

	A User object is true in a boolean context.  The call to find_by only gets executed if @current_user hasn't been assigned.

	This is how we'd write it in ruby...

	@current_user ||= User.find_by(id: session[:user_id])

8.2.3

1. Changing layout links based on login status
	- Add link for logout
	- Add link for user settings
	- Add link for listing all users
	- Add link for profile page

	Change layout based on if else logged in statement.

	<% if logged_in? %>
		# links for logged in user
	<% else %>
		# links for logged out user

	We need a logged_in? boolean method for this to work.

	A user is logged in if there is a current user in the session.  If current_user is not nil we have a logged in user.

	nil = false

	def logged_in?
		!current_user.nil?
	end

8.2.4 Password Fixture

1. Testing Layout Changes
	1. Visit Login Path
	2. Post valid information to the path
	3. Verify that the login link disappears
	4. Verify that a logout link appears
	5. Verify that a profile link appears

	To do this we need a test user already in the database. Rails does this with "fixtures".
	Fixture data gets loaded into the test database. 

	We need one user with a valid username and email and password.  

	The password digest is created useing bcrypt (via has_secure_password) so we'll need to create the fixture password using 
	the same method. 

	The rails secure password source code has a cost: cost variable.  This determines the strength of the hash.  For a fixture we want things to be as fast as possible.  MIN_COST 

	I. Creating a fixture
		test/fixtures/users.yml

		
Back to correct rails book edition!!!!

8.2.1

1. Remember me
	
	Signin functions themselcer will end need to be available in both controllers and views. 
	SessionsHelper is the key to this cross MVC functionality.
	These helpers are automatically included in rails views.  

	By default, all the helpers are available in the views but not in the controllers.  We need the methods from the Sessions
	helper in both places.  So we will include it

	/application_controller 

	include SessionsHelper

	We will use a remember token equal to the user's id.

	session[:remember_token] = user.id

	This session object makes the user id available from page to page by storing it in a cookie that expires upon
	the browser closing.  On each page we can call

	User.find(session[:remember_token])

	to retrieve the user.  Becuase of the way Rails handles sessions, this process is secure; if a malicious user tries to spoof the user id, Rails will detect a mismatch based on a special session id generated for each session.

	Rails generates a special session id to make sure the session isn't hijacked and a user id isn't spoofed. 


2. Persistant Sessions
	We want the session to last between browser sessions and survive after the browser is closed.

	To do this we will generate a unique secure remember token for each user and store it as a perminant cookie.

	The remember token needs to be associated with a user and stored for future use, so we'll add it as a attribute to the User model. 

	Users
		- integer id 
		- string name
		- string email
		- string password_digest
		- string remember_token
		- datetime created_at
		- datetime updated_at


	Add a response test to the User model
	Add migration to database
		rails generate migration add_remember_token_to_users

	Navigate to the migration and add a column and index to the database

		add_column :users, :remember_token, :string
		add_index :users, :remember_token

	Migrate the database
		bundle exec rake db:migrate

	Prep the database
		bundle exec rake db:test:prepare

3. What Should We Use As The Remember Token
	Any large random string should work just fine. 
	In principale, since th user passwords are securly encrypted, we could use each user's password_hash attribute, but it seems like a terrible idea to unnecessarily espose our users' passwords to attackers.  

	Lets do something more secure...

	We'll use the urlsafe_base64 method from the ruby standard library to generate a URI/L string.
	This is a methode from the SecureRandom module within Ruby.

	returns a length 16 string.  It's a very small probability that two strings are generated as the same. 
	This could be a source of odd behavior but it'd be really rare. 

	We'll create a remember token useing a callback.  We'll use a before_save callback to create the remeber_token just before the user is saved.  

	We could do a before_create callback but this would leave it so that any hijacked sessions would never expire.  Fuck that!

	When we use before_save callbacks, the token changes every time the user updates information.  

4. Testing the remember_token

	- Create a test user
	- Check the remember_token isn't empty

	user_spec.rb

	Then we add the functionality to the user.rb model











































